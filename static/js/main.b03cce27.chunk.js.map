{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["FormApp","args","state","student_list","e","this","setState","target","name","value","table_body","document","querySelector","new_row","createElement","datetime","Date","carnet","schedule","late","tarde","push","length","toLocaleString","console","log","className","innerHTML","new_cell","new_btn","innerText","addEventListener","event","id_actual","x","parseInt","id","appendChild","htmlFor","onChange","bind","type","for","onClick","save","enable","Fragment","scope","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b03cce27.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass FormApp extends React.Component{\n \n  constructor(args){\n    super(args)\n    this.state={\n     student_list:[]\n    }\n   \n  }\n  onChange(e){\n    this.setState({\n    [e.target.name]: e.target.value\n     }) } \n\n   \n  save(e){\n    let table_body = document.querySelector(\"#table_body\")\n    let new_row = document.createElement(\"tr\")\n    let datetime = new Date()\n    let carnet=this.state.carnet\n    let schedule=this.state.schedule\n    let late =this.state.tarde\n    \n    this.state.student_list.push(\n      {\n        \"id\": this.state.student_list.length,\n        \"carnet\": carnet,\n        \"horario\": schedule,\n        \"tarde\": late,\n        \"ingreso\": datetime.toLocaleString() }\n    )\n    console.log(this.state.student_list[0].carnet)\n\n    new_row.className= \"table_active\"\n    new_row.innerHTML =` <th scope= 'row'>${carnet}</th>\n    <td> ${schedule}</td>\n    <td> ${datetime.toLocaleString()}</td>\n    <td> ${late}</td>\n  `\n  let new_cell = document.createElement(\"td\")\n  let new_btn= document.createElement(\"button\")\n\n  new_btn.className = \"btn btn-danger\"\n  new_btn.innerText = \"DROP\"\n  new_btn.value = this.state.student_list.length\n\n  new_btn.addEventListener(\"click\", event =>{ \n          \n  let table_body = document.querySelector(\"#table_body\")\n \n  let id_actual =new_btn.value\n  var x = new_btn.value\n  if(id_actual == parseInt(this.state.student_list[x].id)){\n    console.log(x);\n    console.log(this.state.student_list[x].id)\n  delete this.state.student_list[x]\n  \n  table_body.innerHTML=  ` <th scope= 'row'>${carnet}</th>\n  <td> ${schedule}</td>\n  <td> ${datetime.toLocaleString()}</td>\n  <td> ${late}</td>\n  `\n    } }\n  )\n   \n \n\n\n  new_cell.appendChild(new_btn)\n  new_row.appendChild(new_cell)\n  table_body.appendChild(new_row)\n\n\n\n\n    \n  }\n \n \n\n  \n  render(){\n    return(\n    <div>\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        <h1>\n            Registro de laboratorio.\n        </h1>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"carnet\" className=\"col-sm-2 col-form-label\">Ingrese el carnet: </label>\n            <input value={this.state.carnet} onChange={this.onChange.bind(this)}  className=\"form-control\" type=\"text\" name=\"carnet\" id=\"carnet_field\" />\n          </div>\n\n          <div className=\"form-group\">\n            <label for=\"schedule\">Seleccione el horario:</label>\n            <select value={this.state.schedule} onChange={this.onChange.bind(this)} name=\"schedule\" className=\"form-control\" id=\"schedule_field\">\n                <option>Lunes de 9:00 a 11.00</option>\n                <option>Martes de 13:30 a 15:30</option>\n                <option>Miércoles de 9:00 a 11.00</option>\n                <option>Jueves de 13:30 a 15:30</option>\n                <option>Viernes de 9:00 a 11.00</option>\n                <option>Viernes de 15:30 a 17:30</option>\n            </select>\n          </div>\n        \n          <div className=\"form-group\">\n            <div >\n                <label >Llegó tarde?</label>\n                <input value='SI' onChange={this.onChange.bind(this)} type=\"radio\" name=\"tarde\" /> SI\n                <input value='NO' onChange={this.onChange.bind(this)} type=\"radio\" name=\"tarde\" /> NO\n            </div>\n          </div>\n          \n\n        <div className=\"form-group\">\n            <button onClick={this.save.bind(this)} type=\"button\" className=\"btn btn-danger\" id=\"submit_btn\" enable>Ingresar</button>\n        </div>\n    </div>\n    </div>\n    \n    <React.Fragment>\n   <table className=\"table table-hover\">\n   <thead>\n       <tr className=\"table-dark\">\n           <th scope=\"col\">Carnet</th>\n           <th scope=\"col\">Horario de laboratorio</th>\n           <th scope=\"col\">Hora de ingreso</th>\n           <th scope=\"col\">Tarde?</th>\n           <th scope=\"col\">Eliminar</th>\n       </tr>\n   </thead>\n   <tbody id=\"table_body\">\n   </tbody>\n</table>\n</React.Fragment>\n</div>\n    )\n    }\n  \n\n}\n \nexport default FormApp","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}